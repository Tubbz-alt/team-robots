// Generated by CoffeeScript 2.1.0
(function() {
  var COMMENT_TEST_FAILED, COMMENT_TEST_FAILED_DIAG, COMMENT_TEST_SUCCESS, COMMENT_TEST_SUCCESS_DIAG, addTowerComment, checkTodoStatus, checkTodoStatusResult, dtaskUpdate, dtaskUpdateIntvl, dtaskUrl, error, genTakeTaskEL, genTestFailedEL, genTestRequestEL, genTestSuccessEL, getGroupInfo, getGrupInfoResult, getMarkerLabel, getQAsResult, getReorderTodoScript, getReorderTodoScript_2RegressList, getReorderTodoScript_2TestList, getReorderTodoScript_2UncompletedList, getTakeTaskHackJs, getTestRequestHackJs, getUserData, getUserDataResult, giveUpTaskRequest, giveUpTaskResult, groupData, hackTaskCount, hackingDayData, port, projectsUrlReg, renderTakeTaskLabel, renderTestDecisionLabel, renderTestRequestLabel, runOnPage, showTowerMsgDiag, takeTaskClickEvent, takeTaskRequest, takeTaskResult, testFailedClickEvent, testFailedResult, testRequestClickEvent, testRequestResult, testSuccessClickEvent, testSuccessResult, title, todosUrlReg, userData, userGuid;

  dtaskUrl = "";

  error = false;

  userGuid = "";

  title = "";

  userData = {};

  groupData = {};

  //hack day guid
  hackingDayData = {
    project: "792c5b3e3279431b9ca757dee0219d8a",
    uncompleted: "405a6ae12c4a4121a0c6dc23efa459be",
    testRequest: "4e61367839924710948c71425f1c49d4",
    regress: "b25dc4347f46405ba754b6060abeed1e"
  };

  // hacking day project and todos page url reg
  projectsUrlReg = `https://tower.im/projects/${hackingDayData.project}/?$`;

  todosUrlReg = `https://tower.im/projects/${hackingDayData.project}/todos/[0-9a-f]{32}`;

  COMMENT_TEST_SUCCESS = ":smile: 测试通过咯 :thumbsup:";

  COMMENT_TEST_FAILED = ":cold_sweat: 测试失败了 :broken_heart:";

  COMMENT_TEST_SUCCESS_DIAG = "真棒! 任务已经移动到回归测试列表咯~~";

  COMMENT_TEST_FAILED_DIAG = "记得把测试失败的气球扎破哦~~";

  port = chrome.runtime.connect({
    name: "dataconnect"
  });

  port.onDisconnect.addListener(function(msg) {
    console.log("port disconnect ...");
    return port = null;
  });

  port.onMessage.addListener(function(msg) {
    switch (msg.type) {
      case "query_hacking_day_url_result":
        dtaskUrl = msg.url;
        console.log(dtaskUrl);
        return dtaskUpdate();
      case "cache_get_result":
        //console.log(msg)
        switch (msg.key) {
          case "hacking_day_user_data":
            if (msg.value) {
              return userData = msg.value;
            } else {
              return getUserData();
            }
            break;
          case "hacking_day_group_data":
            //console.log(msg.value)
            if (msg.value) {
              return groupData = msg.value;
            } else {
              return getGroupInfo();
            }
        }
        break;
      case "cache_store_result":
        return "";
    }
  });

  //console.log("cache has been stored")
  //console.log("result:", msg)
  dtaskUpdate = function() {
    var ref, regressTodolist, testingTodolist, uncompletedTodolist;
    // just show in hacking day page
    if (location.href.match(projectsUrlReg) || location.href.match(todosUrlReg)) {
      userGuid = $("#member-guid").val();
      //userGuid = "abcefesafdsaklfdsjieo"
      title = (ref = $(".todo .todo-rest")[0]) != null ? ref.textContent : void 0;
      // just work for special todolist
      uncompletedTodolist = $(`.todolist[data-guid=${hackingDayData.uncompleted}]`);
      testingTodolist = $(`.todolist[data-guid=${hackingDayData.testRequest}]`);
      regressTodolist = $(`.todolist[data-guid=${hackingDayData.regress}]`);
      if (location.href.match(projectsUrlReg)) {
        uncompletedTodolist.find(".todo").each(function(i, e) {
          var projectGuid, todoGuid;
          if (!$(e).find(".dtask-marker-label").length) {
            projectGuid = e.getAttribute("data-project-guid");
            todoGuid = e.getAttribute("data-guid");
            checkTodoStatus(projectGuid, todoGuid);
            return $(e).append(getMarkerLabel());
          }
        });
        // debug
        //console.log("uncompleted: update todo status, guid: " + todoGuid)
        testingTodolist.find(".todo").each(function(i, e) {
          var projectGuid, todoGuid;
          if (!$(e).find(".dtask-marker-label").length) {
            projectGuid = e.getAttribute("data-project-guid");
            todoGuid = e.getAttribute("data-guid");
            checkTodoStatus(projectGuid, todoGuid);
            return $(e).append(getMarkerLabel());
          }
        });
        // debug
        //console.log("testing: update todo status, guid: " + todoGuid)
        regressTodolist.find(".todo").each(function(i, e) {
          var projectGuid, todoGuid;
          if (!$(e).find(".dtask-marker-label").length) {
            projectGuid = e.getAttribute("data-project-guid");
            todoGuid = e.getAttribute("data-guid");
            checkTodoStatus(projectGuid, todoGuid);
            return $(e).append(getMarkerLabel());
          }
        });
      }
      // debug
      //console.log("regress: update todo status, guid: " + todoGuid)
      if (location.href.match(todosUrlReg)) {
        $(".todo").each(function(i, e) {
          var projectGuid, todoGuid;
          if (!$(e).find(".dtask-marker-label").length) {
            projectGuid = e.getAttribute("data-project-guid");
            todoGuid = e.getAttribute("data-guid");
            checkTodoStatus(projectGuid, todoGuid);
            return $(e).append(getMarkerLabel());
          }
        });
      }
      // debug
      //console.log("todo: update todo status, guid: " + todoGuid)
      return hackTaskCount();
    }
  };

  getMarkerLabel = function() {
    var label;
    label = $(document.createElement("input"));
    label.attr({
      type: "hidden"
    });
    label.addClass("dtask-marker-label");
    return label;
  };

  checkTodoStatus = function(projectGuid, todoGuid) {
    return $.ajax({
      url: `${dtaskUrl}/hacking_day/mission`,
      dataType: "json",
      data: {
        todo_guid: todoGuid,
        member_guid: userGuid,
        todo_title: title
      },
      success: function(data) {
        return checkTodoStatusResult(data, projectGuid, todoGuid);
      },
      error: function(req, msg, e) {
        console.log("get task status request error: ", msg);
        return error = true;
      }
    });
  };

  hackTaskCount = function() {
    var canBeToken, canNotBeToken, regressCount, testingCount, titleMsg, uncompletedCount;
    uncompletedCount = $(`.todolist[data-guid=${hackingDayData.uncompleted}]`).find(".todo").size();
    canNotBeToken = $(`.todolist[data-guid=${hackingDayData.uncompleted}]`).find(".todo").find(".dtask-take-task-label").size();
    canBeToken = uncompletedCount - canNotBeToken;
    testingCount = $(`.todolist[data-guid=${hackingDayData.testRequest}]`).find(".todo").size();
    regressCount = $(`.todolist[data-guid=${hackingDayData.regress}]`).find(".todo").size();
    titleMsg = `任务列表: ${uncompletedCount} 个 ( ${canBeToken} 个可抢)\n测试列表: ${testingCount} 个\n回归测试列表: ${regressCount} 个`;
    return $("#link-feedback").attr("title", titleMsg);
  };

  checkTodoStatusResult = function(data, projectGuid, todoGuid) {
    var currentListUrl, ref, ref1;
    //console.log("task status data: ", data)
    renderTakeTaskLabel(data, projectGuid, todoGuid);
    // render test request label and test decision label
    if (location.href.match(todosUrlReg)) {
      currentListUrl = $(".project-info>span>a:last").attr("href");
      // tester decision test result label
      if (((ref = userData.role) != null ? ref.toLowerCase() : void 0) === "tester" && currentListUrl.match(hackingDayData.testRequest)) {
        renderTestDecisionLabel(data, projectGuid, todoGuid);
      }
      // test request label
      if (((ref1 = data.result) != null ? ref1.can_be_given_up : void 0) && currentListUrl.match(hackingDayData.uncompleted)) {
        // and data.result?.status?.toLowerCase() != "testing"
        // show test request
        return $.ajax({
          url: `${dtaskUrl}/hacking_day/testers`,
          dataType: "json",
          data: {
            member_guid: userGuid
          },
          success: function(data) {
            return getQAsResult(data, projectGuid, todoGuid);
          },
          error: function(req, msg, e) {
            console.log("get QAs request error: ", msg);
            return error = true;
          }
        });
      }
    }
  };

  getTakeTaskHackJs = function(data, projectGuid, todoGuid) {
    var cc, commentContent, connGuid, hackJs, ref, ref1, reorder;
    hackJs = "";
    if (!((ref = data.result) != null ? ref.is_grabbed : void 0)) {
      commentContent = "<p> :sunglasses: 这一单子我抢啦~~</p>";
      cc = "";
      connGuid = $("#conn-guid").val();
      hackJs += `$.ajax({\n    url:"https://tower.im/projects/${projectGuid}/todos/${todoGuid}/comments",\n    data: {\n        "completed":false,\n        "comment_content": '${commentContent}',\n        "is_html": 1,\n        "cc_guids": "${cc}",\n        "conn_guid": "${connGuid}"\n    }\n});`;
    } else if ((ref1 = data.result) != null ? ref1.can_be_given_up : void 0) {
      // 放弃任务
      reorder = `$.ajax({\n    url:"https://tower.im/projects/${projectGuid}/todos/${todoGuid}/reorder",\n    data: {"list_guid":"${hackingDayData.uncompleted}", "completed":false}\n});\nsetTimeout( "window.location.reload()", 1000);`;
      //\\window.location.reload();
      hackJs += reorder;
    }
    return hackJs;
  };

  takeTaskResult = function(data, el) {
    var comment, content, hackDialogJs, memberNotFoundIdentificatin, ref, ref1, ref2, ref3;
    memberNotFoundIdentificatin = "member_guid not found";
    if ((ref = data.result) != null ? ref.is_success : void 0) {
      comment = " :sunglasses: 这一单子我抢啦~~";
      $(".fake-textarea").click();
      $(".simditor-body").html(`<p>${comment}</p>`);
      $(".btn-create-comment").click();
      //alert("抢单成功")
      hackDialogJs = 'simple.dialog.message({content:"抢单成功! 加油!!"})';
      runOnPage(hackDialogJs);
      // only remove dtask-marker-label, can label be update as soon
      $(".todo").find(".dtask-marker-label").remove();
      return dtaskUpdate();
    } else if (((ref1 = data.result) != null ? ref1.winner : void 0) != null) {
      //window.location.reload()
      content = `抢单失败: 任务已被 ${((ref2 = data.result) != null ? (ref3 = ref2.winner) != null ? ref3.group : void 0 : void 0)} 抢啦`;
      hackDialogJs = `simple.dialog.confirm({\ncontent:'${content}',\nbuttons:[{\n    text: 'Oh no~~',\n    callback: function(e){\n        location.reload()\n        }\n    }]\n})`;
      return runOnPage(hackDialogJs);
    } else if ((data.error_message != null) && data.error_message.indexOf(memberNotFoundIdentificatin) > -1) {
      content = "抢单失败：您不是本次活动的参与者，不能参与抢单";
      hackDialogJs = `simple.dialog.message({content:'${content}'})`;
      return runOnPage(hackDialogJs);
    } else {
      content = `抢单失败: ${data.error_message}`;
      hackDialogJs = `simple.dialog.message({content:'${content}'})`;
      return runOnPage(hackDialogJs);
    }
  };

  giveUpTaskRequest = function(todoGuid, el) {
    return $.ajax({
      url: `${dtaskUrl}/hacking_day/mission/grab`,
      type: "DELETE",
      dataType: "json",
      data: {
        todo_guid: todoGuid,
        member_guid: userGuid,
        todo_title: title
      },
      success: function(data) {
        return giveUpTaskResult(data, el);
      },
      error: function(req, msg, e) {
        console.log("give up task request error: ", msg);
        return error = true;
      }
    });
  };

  giveUpTaskResult = function(data, el) {
    var content, ref;
    if ((ref = data.result) != null ? ref.is_success : void 0) {
      // execute success-js
      content = " :scream: 太难了，我不干了 T_T ";
      addTowerComment(content);
      return runOnPage(el.attr("success-js"));
    }
  };

  //dtaskUpdate() # reload page in success-js
  takeTaskClickEvent = function(e) {
    var el, todoGuid;
    el = $(this);
    todoGuid = e.data.todoGuid;
    if (el.hasClass("type-error")) {
      return console.log("no permission, can not take task");
    } else if (el.hasClass("type-take-task")) {
      return takeTaskRequest(todoGuid, el);
    } else if (el.hasClass("type-give-up")) {
      if (confirm(" 确定要放弃你们的任务吗？")) {
        return giveUpTaskRequest(todoGuid, el);
      }
    } else {
      return console.log("take task click event, but nothing happen");
    }
  };

  takeTaskRequest = function(todoGuid, el) {
    return $.ajax({
      url: `${dtaskUrl}/hacking_day/mission/grab`,
      type: "POST",
      dataType: "json",
      data: {
        todo_guid: todoGuid,
        todo_title: title,
        member_guid: userGuid
      },
      //member_guid: "7eb8b087d6d247d0b3f86331900e63ed"
      success: function(data) {
        var hackDialogJs, text;
        if (!data.error) {
          return takeTaskResult(data, el);
        } else if (data.error_message.match("mission grab limit reached")) {
          text = " >_< &nbsp; 抢单数量已达到你们队伍的上限啦，请先完成或放弃部分任务";
          hackDialogJs = `simple.dialog.message({content:"${text}"})`;
          return runOnPage(hackDialogJs);
        }
      },
      error: function(req, msg, e) {
        console.log("take task request error: ", msg);
        return error = true;
      }
    });
  };

  getTestRequestHackJs = function(data, projectGuid, todoGuid) {
    var hackJs, reorder;
    reorder = `$.ajax({\n    url:"https://tower.im/projects/${projectGuid}/todos/${todoGuid}/reorder",\n    data: {"list_guid":"${hackingDayData.testRequest}", "completed":false}\n});`;
    hackJs = reorder;
    return hackJs;
  };

  genTakeTaskEL = function(data, projectGuid, todoGuid) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, takeTask, takeTaskHackJs;
    takeTask = $(document.createElement("a"));
    takeTaskHackJs = getTakeTaskHackJs(data, projectGuid, todoGuid);
    takeTask.attr({
      href: "javascript:void(0)",
      //onclick: takeTaskHackJs
      "success-js": takeTaskHackJs
    });
    if (data.error || (!((ref = data.result) != null ? ref.can_be_grabbed : void 0) && !((ref1 = data.result) != null ? ref1.can_be_given_up : void 0) && !((ref2 = data.result) != null ? ref2.is_grabbed : void 0))) {
      //return null
      takeTask.text("不可抢");
      takeTask.addClass("label assign");
      takeTask.addClass("type-error");
      if (data.error_message != null) {
        console.log("error:", data.error_message);
      }
    } else if ((ref3 = data.result) != null ? ref3.can_be_grabbed : void 0) {
      takeTask.text("立即抢单");
      takeTask.addClass("label no-assign");
      takeTask.addClass("type-take-task");
      takeTask.css({
        "background-color": "#CCFF66",
        "color": "black"
      });
    } else if (((ref4 = data.result) != null ? ref4.can_be_given_up : void 0) && !location.href.match(projectsUrlReg)) {
      takeTask.text("放弃任务");
      takeTask.addClass("label no-assign");
      takeTask.css({
        "background-color": "#FF6666",
        "color": "black"
      });
      takeTask.addClass("type-give-up");
    } else {
      takeTask.text(`已被 ${((ref5 = data.result) != null ? (ref6 = ref5.winner) != null ? ref6.group : void 0 : void 0)} 抢啦`);
      takeTask.addClass("label assign");
      takeTask.addClass("type-none");
      takeTask.css({
        "background-color": "#CCCC66",
        "color": "black"
      });
    }
    takeTask.addClass("dtask-hd-label");
    takeTask.addClass("dtask-take-task-label");
    takeTask.bind("click", {
      projectGuid: projectGuid,
      todoGuid: todoGuid
    }, takeTaskClickEvent);
    return takeTask;
  };

  getQAsResult = function(data, projectGuid, todoGuid) {
    return renderTestRequestLabel(data, projectGuid, todoGuid);
  };

  testRequestClickEvent = function(e) {
    var todoGuid;
    groupData = e.data.data;
    todoGuid = e.data.todoGuid;
    return $.ajax({
      url: `${dtaskUrl}/hacking_day/mission/request_test`,
      type: "POST",
      dataType: "json",
      data: {
        todo_guid: todoGuid,
        member_guid: userGuid,
        todo_title: title
      },
      success: function(rspData) {
        return testRequestResult(rspData, groupData, todoGuid);
      },
      error: function(req, msg, e) {
        console.log("send test requesting request error: ", msg);
        return error = true;
      }
    });
  };

  testRequestResult = function(data, groupData, todoGuid) {
    var commentContent, connGuid, hackDialogJs, ref, ref1, reorder;
    if (data.result) {
      // comment
      commentContent = "<p> :sunglasses: 请求测试 <br />";
      connGuid = $("#conn-guid").val();
      if ((ref = groupData.result) != null) {
        if ((ref1 = ref.testers) != null) {
          ref1.forEach(function(c) {
            var content;
            content = `<a href="/members/${c.guid}" data-mention="true">@${c.nickname}</a>&nbsp;`;
            commentContent += content;
            c = $(`.member-list input[value=${c.guid}]`);
            return c.attr("checked", true);
          });
        }
      }
      commentContent += "</p>";
      addTowerComment(commentContent);
      // dialog tips
      hackDialogJs = "simple.dialog.confirm(\n{content:\"太棒了！记得去找评委领气球喔~ \",\nbuttons:[{\n    text: \"知道啦~ ^o^\",\n    callback: function(e){\n                location.reload()\n            }\n        }\n    ]}\n);";
      reorder = `$.ajax({\n    url:"https://tower.im/projects/${hackingDayData.project}/todos/${todoGuid}/reorder",\n    data: {"list_guid":"${hackingDayData.testRequest}", "completed":false}\n});`;
      return runOnPage(reorder + hackDialogJs);
    } else {
      return console.log("request test result is false", data);
    }
  };

  renderTakeTaskLabel = function(data, projectGuid, todoGuid) {
    var currentListUrl, e, ref, takeTaskEL;
    // add label
    e = $(`.todo[data-guid=${todoGuid}]`);
    e.find(".dtask-take-task-label").remove();
    currentListUrl = $(".project-info>span>a:last").attr("href");
    if (location.href.match(projectsUrlReg) || currentListUrl.match(hackingDayData.uncompleted) || currentListUrl.match(hackingDayData.testRequest) || currentListUrl.match(hackingDayData.regress)) {
      // skip if current url is project page url and there is not any task with winner
      if (location.href.match(projectsUrlReg) && (((ref = data.result) != null ? ref.winner : void 0) == null)) {
        return "";
      }
      takeTaskEL = genTakeTaskEL(data, projectGuid, todoGuid);
      if (takeTaskEL != null) {
        return $(e).find(".todo-detail").append(takeTaskEL);
      }
    }
  };

  renderTestDecisionLabel = function(data, projectGuid, todoGuid) {
    var e, testFailedEL, testSuccessEL;
    // add label
    e = $(`.todo[data-guid=${todoGuid}]`);
    e.find(".dtask-test-decision-label").remove();
    testSuccessEL = genTestSuccessEL(data, projectGuid, todoGuid);
    testFailedEL = genTestFailedEL(data, projectGuid, todoGuid);
    if (testSuccessEL != null) {
      $(e).find(".todo-detail").append(testSuccessEL);
    }
    if (testFailedEL != null) {
      return $(e).find(".todo-detail").append(testFailedEL);
    }
  };

  genTestSuccessEL = function(data, projectGuid, todoGuid) {
    var el;
    // rest request
    el = $(document.createElement("a"));
    el.attr({
      href: "javascript:void(0)"
    });
    el.bind("click", {
      todoGuid: todoGuid
    }, testSuccessClickEvent);
    el.text("测试通过");
    el.addClass("label no-assign");
    el.addClass("dtask-hd-label");
    el.addClass("dtask-test-decision-label");
    el.css({
      "background-color": "#99FF66",
      "color": "black"
    });
    return el;
  };

  testSuccessClickEvent = function(e) {
    var result, todoGuid;
    result = "passed";
    todoGuid = e.data.todoGuid;
    return $.ajax({
      url: `${dtaskUrl}/hacking_day/mission/test_result`,
      type: "PUT",
      dataType: "json",
      data: {
        todo_guid: todoGuid,
        member_guid: userGuid,
        todo_title: title,
        result: result
      },
      success: function(data) {
        return testSuccessResult(data, todoGuid);
      },
      error: function(req, msg, e) {
        console.log("send test success result request error: ", msg);
        return error = true;
      }
    });
  };

  testSuccessResult = function(data, todoGuid) {
    var hackDialogJs, reorderScript;
    reorderScript = getReorderTodoScript_2RegressList(todoGuid);
    addTowerComment(COMMENT_TEST_SUCCESS);
    hackDialogJs = `simple.dialog.confirm(\n{content:"${COMMENT_TEST_SUCCESS_DIAG}",\nbuttons:[{\n    text: "知道啦~ ^o^",\n    callback: function(e){\n                location.reload()\n            }\n        }\n    ]}\n)`;
    return runOnPage(reorderScript + hackDialogJs);
  };

  //runOnPage(reorderScript)
  genTestFailedEL = function(data, projectGuid, todoGuid) {
    var el;
    // rest request
    el = $(document.createElement("a"));
    el.attr({
      href: "javascript:void(0)"
    });
    el.bind("click", {
      data: data,
      todoGuid: todoGuid
    }, testFailedClickEvent);
    el.text("测试失败");
    el.addClass("label no-assign");
    el.addClass("dtask-hd-label");
    el.addClass("dtask-test-decision-label");
    el.css({
      "background-color": "#f55",
      "color": "black"
    });
    return el;
  };

  testFailedClickEvent = function(e) {
    var result, todoGuid;
    result = "failed";
    todoGuid = e.data.todoGuid;
    return $.ajax({
      url: `${dtaskUrl}/hacking_day/mission/test_result`,
      type: "PUT",
      dataType: "json",
      data: {
        todo_guid: todoGuid,
        member_guid: userGuid,
        todo_title: title,
        result: result
      },
      success: function(data) {
        return testFailedResult(data, todoGuid);
      },
      error: function(req, msg, e) {
        console.log("send test success result request error: ", msg);
        return error = true;
      }
    });
  };

  testFailedResult = function(data, todoGuid) {
    var hackDialogJs, reorderScript;
    reorderScript = getReorderTodoScript_2UncompletedList(todoGuid);
    addTowerComment(COMMENT_TEST_FAILED);
    hackDialogJs = `simple.dialog.confirm(\n{content:"${COMMENT_TEST_FAILED_DIAG}",\nbuttons:[{\n    text: "知道了",\n    callback: function(e){\n                location.reload()\n            }\n        }\n    ]}\n);`;
    return runOnPage(reorderScript + hackDialogJs);
  };

  genTestRequestEL = function(data, projectGuid, todoGuid) {
    var testRequest, testRequestHackJs;
    // rest request
    testRequest = $(document.createElement("a"));
    testRequestHackJs = getTestRequestHackJs(data, projectGuid, todoGuid);
    testRequest.attr({
      href: "javascript:void(0)"
    });
    //onclick: testRequestHackJs
    testRequest.bind("click", {
      data: data,
      todoGuid: todoGuid
    }, testRequestClickEvent);
    testRequest.text("请求测试");
    testRequest.addClass("label no-assign");
    testRequest.addClass("dtask-hd-label");
    testRequest.addClass("dtask-test-request-label");
    testRequest.css({
      "background-color": "#99FF66",
      "color": "black"
    });
    return testRequest;
  };

  renderTestRequestLabel = function(data, projectGuid, todoGuid) {
    var e, testRequestEL;
    // add label
    e = $(`.todo[data-guid=${todoGuid}]`);
    e.find(".dtask-test-request-label").remove();
    testRequestEL = genTestRequestEL(data, projectGuid, todoGuid);
    return $(e).find(".todo-detail").append(testRequestEL);
  };

  // ----------- tools -------------- #
  addTowerComment = function(content) {
    $(".fake-textarea").click();
    $(".simditor-body").html(`<p>${content}</p>`);
    return $(".btn-create-comment").click();
  };

  showTowerMsgDiag = function(content) {
    var hackDialogJs;
    hackDialogJs = `simple.dialog.message({content:"${content}"})`;
    return runOnPage(hackDialogJs);
  };

  getReorderTodoScript_2TestList = function(todoGuid) {
    var distGuid;
    distGuid = hackingDayData.testRequest;
    return getReorderTodoScript(todoGuid, distGuid);
  };

  getReorderTodoScript_2UncompletedList = function(todoGuid) {
    var distGuid;
    distGuid = hackingDayData.uncompleted;
    return getReorderTodoScript(todoGuid, distGuid);
  };

  getReorderTodoScript_2RegressList = function(todoGuid) {
    var distGuid;
    distGuid = hackingDayData.regress;
    return getReorderTodoScript(todoGuid, distGuid);
  };

  getReorderTodoScript = function(todoGuid, distGuid, projectGuid) {
    var script;
    if (projectGuid == null) {
      projectGuid = hackingDayData.project;
    }
    script = `$.ajax({\n    url:"https://tower.im/projects/${projectGuid}/todos/${todoGuid}/reorder",\n    data: {"list_guid":"${distGuid}", "completed":false}\n});`;
    return script;
  };

  runOnPage = function(code) {
    //console.log(code)
    return location.href = `javascript: ${code}; void 0;`;
  };

  getUserData = function() {
    return $.ajax({
      url: `${dtaskUrl}/hacking_day/member`,
      dataType: "json",
      data: {
        member_guid: userGuid
      },
      success: function(data) {
        return getUserDataResult(data);
      },
      error: function(req, msg, e) {
        console.log("get user role request error: ", msg);
        return error = true;
      }
    });
  };

  getUserDataResult = function(data) {
    var ref;
    userData = (ref = data.result) != null ? ref.member : void 0;
    if (userData == null) {
      userData = "";
      console.error("get hacking_day/member error, user_role is null");
    }
    return port.postMessage({
      type: "cache_store",
      cache: {
        "hacking_day_user_data": userData
      }
    });
  };

  getGroupInfo = function() {
    return $.ajax({
      url: `${dtaskUrl}/hacking_day/groups`,
      dataType: "json",
      data: {
        member_guid: userGuid
      },
      success: function(data) {
        return getGrupInfoResult(data);
      },
      error: function(req, msg, e) {
        console.log("getting group info request error: ", msg);
        return error = true;
      }
    });
  };

  getGrupInfoResult = function(data) {
    groupData = data.result;
    if (groupData == null) {
      groupData = "";
      console.error("get hacking_day/groups error, group info is null");
    }
    return port.postMessage({
      type: "cache_store",
      cache: {
        "hacking_day_group_data": groupData
      }
    });
  };

  // start
  port.postMessage({
    type: "query_hacking_day_url"
  });

  port.postMessage({
    type: "cache_get",
    key: "hacking_day_user_data"
  });

  port.postMessage({
    type: "cache_get",
    key: "hacking_day_group_data"
  });

  dtaskUpdateIntvl = setInterval(dtaskUpdate, 1000);

}).call(this);
